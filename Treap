#include <iostream>
#include <unistd.h>
#include <stdlib.h>
using namespace std;

struct Nodo{
	int prioridad;
	string dato;
	Nodo *der;
	Nodo *izq;
	Nodo *padre;
};

//Prototipos
void menu();
Nodo *crearNodo(string, Nodo *, int);
void insertarNodo(Nodo *&, string, Nodo *, int);
void mostrarArbol(Nodo *, int);
bool busqueda(Nodo *, string);
void preOrden(Nodo *);
void inOrden(Nodo *);
void postOrden(Nodo *);
void eliminar(Nodo *, string);
void eliminarNodo(Nodo *);
Nodo *minimo(Nodo *);
void reemplazar(Nodo *, Nodo *);
void destruirNodo(Nodo *);

void rotDer(Nodo *&);
void rotIzq(Nodo *&);

Nodo *arbol = NULL;

int main(){

	menu();

/*
	while(nodo != root /* Hacer que root = arbol[0] *//* && nodo->prioridad > nodo->padre->prioridad){ 
		if (nodo->padre->izq == nodo){ //El nodo esta a la izq del padre
			//realizar rotacion derecha en el nodo padre
		}
		else{ //El nodo esta a la der del padre
			//realizar rotacion derecha en el nodo padre
		}
	}
*/
	
	return 0;
}

//Funcion de menu
void menu(){
	int prioridad, opcion, contador=0;
	string dato;
	
	do{
		system("clear");
		cout<<"\t.:MENU:."<<endl;
		cout<<"1. Insertar un nuevo nodo"<<endl;
		cout<<"2. Mostrar el arbol completo"<<endl;
		cout<<"3. Buscar un elemento en el arbol"<<endl;
		cout<<"4. Recorrer el arbol en PreOrden"<<endl;
		cout<<"5. Recorrer el arbol en InOrden"<<endl;
		cout<<"6. Recorrer el arbol en PostOrden"<<endl;
		cout<<"7. Eliminar un nodo del arbol"<<endl;
		cout<<"8. Salir"<<endl;
		cout<<"\nOpcion: ";
		cin>>opcion;

		switch(opcion){

			case 1: cout<<"\nDigite la palabra a agregar: ";
				cin>>dato;
				cout<<"\nDigite la prioridad(1, 2, 3): ";
				cin>>prioridad;
				insertarNodo(arbol, dato, NULL, prioridad); //Insertamos un nuevo nodo
				cout<<"\n";
				break;

			case 2: cout<<"\nMostrando el arbol completo:\n\n";
				mostrarArbol(arbol, contador);
				cout<<"\n";
				sleep(5);
				break;

			case 3: cout<<"\nDigite el elemento a buscar: ";
				cin>>dato;
				if(busqueda(arbol, dato) == true){
					cout<<"\nElemento "<<dato<<" ha sido encontrado en el arbol.\n";
				}
				else{
					cout<<"\nElemento "<<dato<<" no encontrado.\n";
				}
				sleep(5);
				break;

			case 4: cout<<"\nRecorrido en PreOrden.\n";
				preOrden(arbol);
				cout<<"\n\n";
				sleep(5);
				break;

			case 5: cout<<"\nRecorrido en InOrden.\n";
				inOrden(arbol);
				cout<<"\n\n";
				sleep(5);
				break;

			case 6: cout<<"\nRecorrido en PostOrden.\n";
				postOrden(arbol);
				cout<<"\n\n";
				sleep(5);
				break;

			case 7: cout<<"\nDigite el nodo a eliminar: ";
				cin>>dato;
				eliminar(arbol, dato);
				cout<<"\n";
				sleep(3);
				break;
		}
	}while(opcion != 8);

	system("clear");
}

//Funcion para crear un nuevo nodo.
Nodo *crearNodo(string n, Nodo *padre, int prioridad){
	Nodo *nuevo_nodo = new Nodo();

	nuevo_nodo->prioridad = prioridad;
	nuevo_nodo->dato = n;
	nuevo_nodo->der = NULL;
	nuevo_nodo->izq = NULL;
	nuevo_nodo->padre =  padre;

	return nuevo_nodo;
}


//Funcion para insertar elementos en el arbol.
void insertarNodo(Nodo *&arbol, string n, Nodo *padre, int prioridad){

	Nodo *aux = NULL;

	if(arbol == NULL){ //Si el arbol esta vacio
		Nodo *nuevo_nodo = crearNodo(n, padre, prioridad);
		arbol = nuevo_nodo;
	}
	else{ //Si el arbol tiene uno o mas nodos
		string valorRaiz = arbol->dato; //Obtenemos el valor de la raiz
		if(n < valorRaiz){ //Si el elemento es menor que la raiz, insertamos en izq
			insertarNodo(arbol->izq, n, arbol, prioridad);
			if (arbol->izq != nullptr && arbol->izq->prioridad > arbol->prioridad){
				rotDer(arbol);
			}
		}
		else{ //Si el elemento es mayor que la raiz, insertamos en der
			insertarNodo(arbol->der, n, arbol, prioridad);
			if(arbol->der != nullptr && arbol->der->prioridad > arbol->prioridad){
				rotIzq(arbol);
			}
		}
	}
}




void rotIzq(Nodo* &arbol) { //left rotation
   Nodo* R = arbol->der;
   Nodo* X = arbol->der->izq;
   R->izq = arbol;
   arbol->der = X;
   arbol = R;
}

void rotDer(Nodo* &arbol) { //right rotation
   Nodo* L = arbol->izq;
   Nodo* Y = arbol->izq->der;
   L->der = arbol;
   arbol->izq = Y;
   arbol = L;
}


//Funcion para mostrar el arbol completo.
void mostrarArbol(Nodo *arbol, int n)
{
     if(arbol==NULL)
          return;
     mostrarArbol(arbol->der, n+1);

     for(int i=0; i<n; i++)
         cout<<"   ";

     cout << arbol->dato << " " << arbol->prioridad <<endl;

     mostrarArbol(arbol->izq, n+1);
}


//Buscar un elemento en el arbol 
bool busqueda(Nodo *arbol, string n){
	if (arbol == NULL){	//Si el arbol esta vacio
		return false;
	}
	else if (arbol->dato == n){ //Si el nodo es igual al elemento
		return true;
	}
	else if (n < arbol->dato){
		return busqueda(arbol->izq, n);
	}
	else{
		return busqueda(arbol->der, n);
	}
}


//Funcion para recorrido en profundidad - PreOrden
void preOrden(Nodo *arbol){
	if(arbol == NULL){ //Si el arbol esta vacio
		return;
	}
	else{
		cout<<arbol->dato<<" - ";
		preOrden(arbol->izq);
		preOrden(arbol->der);
	}

}


//Funcion para recorrido en profundidad - InOrden
void inOrden(Nodo *arbol){
	if (arbol == NULL){
		return;
	}
	else{
		inOrden(arbol->izq);
		cout<<arbol->dato<<" - ";
		inOrden(arbol->der);
	}
}


//Funcion para recorrido en profundidad - PostOrden
void postOrden(Nodo *arbol){
	if (arbol == NULL){
		return;
	}
	else{
		postOrden(arbol->izq);
		postOrden(arbol->der);
		cout<<arbol->dato<<" - ";
	}
}


//Funcion para eliminar un nodo del arbol
void eliminar(Nodo *arbol, string n){
	if (arbol == NULL){ //Si el arbol esta vacio
		return; //No hace nada
	}
	else if (n < arbol->dato){
		eliminar(arbol->izq, n); //Busca por la izq
	}
	else if (n > arbol->dato){
		eliminar(arbol->der, n);
	}
	else{ //Si ya encontraste el valor
		eliminarNodo(arbol);
	}
}


//Fucnion para determinar el nodo mas izq posible
Nodo *minimo(Nodo *arbol){
	if (arbol == NULL){
		return NULL;
	}
	else if(arbol->izq){	//Si tiene hijo izq
		return minimo(arbol->izq); //buscamos la parte mas izq posible
	}
	else{ //Si no tiene hijo izq
		return arbol; //Retornamos el mismo nodo
	}
}


//Funcion para reemplazar dos nodos
void reemplazar(Nodo *arbol, Nodo *nuevoNodo){
	if(arbol->padre){
		//arbol-> hay que asignarle su nuevo hijo
		if(arbol->dato == arbol->padre->izq->dato){
			arbol->padre->izq = nuevoNodo;
		}
		else if (arbol->dato == arbol->padre->der->dato){
			arbol->padre->der = nuevoNodo;	
		}
	}
	if(nuevoNodo){
		//Procedemos a asignarle su nuevo padre
		nuevoNodo->padre = arbol->padre;
	}
}


//Funcion para destruir un nodo
void destruirNodo(Nodo *nodo){
	nodo->izq = NULL;
	nodo ->der = NULL;

	delete nodo;
}


//Funcion para elimianr el nodo encontrado
void eliminarNodo(Nodo *nodoEliminar){
	if(nodoEliminar->izq && nodoEliminar->der){ //Si el nodo tiene hijo izq y der
		Nodo *menor = minimo(nodoEliminar->der);
		nodoEliminar->dato = menor->dato;
		eliminarNodo(menor);
	}
	else if (nodoEliminar->izq){ //Si tiene hijo izquierdo
		reemplazar(nodoEliminar, nodoEliminar->izq);
		destruirNodo(nodoEliminar);
	}
	else if (nodoEliminar->der){ //Si tiene hijo derecho
		reemplazar(nodoEliminar, nodoEliminar->der);
		destruirNodo(nodoEliminar);
	}
	else{ //No tiene hijos
		reemplazar(nodoEliminar, NULL);
		destruirNodo(nodoEliminar);
	}
}
